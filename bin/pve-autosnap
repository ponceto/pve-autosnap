#!/bin/sh
#
# pve-autosnap - Copyright (c) 2018-2024 - Olivier Poncet
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>
#

# ----------------------------------------------------------------------------
# pve constants
# ----------------------------------------------------------------------------

pve_ct_manager="${PVE_CT_MANAGER:-/usr/sbin/pct}"
pve_vm_manager="${PVE_VM_MANAGER:-/usr/sbin/qm}"
pve_lower_id='100'
pve_upper_id='1000000'

# ----------------------------------------------------------------------------
# kvm/lxc manager definitions
# ----------------------------------------------------------------------------

cmd_status='status'
cmd_list_vm='list'
cmd_list_snapshot='listsnapshot'
cmd_create_snapshot='snapshot'
cmd_delete_snapshot='delsnapshot'

# ----------------------------------------------------------------------------
# command-line arguments
# ----------------------------------------------------------------------------

arg_program="${0:-pve-autosnap}"
arg_basename="$(basename ${arg_program})"
arg_vmid='help'
arg_keep='1'
arg_lower_id="${pve_lower_id}"
arg_upper_id="${pve_upper_id}"
arg_exclude=''
arg_include=''
arg_tag='not-set'
arg_prefix='AUTOSNAP'
arg_usage='no'
arg_debug='no'
arg_error='no'

# ----------------------------------------------------------------------------
# parse the <vmid> positional argument
# ----------------------------------------------------------------------------

if [ "${#}" -gt '0' ] && [ "${1:-not-set}" != 'not-set' ]
then
    case "${1}" in
        --help)
            arg_usage='yes'
            shift
            ;;
        [0-9]* | all | none | help)
            arg_vmid="${1}"
            shift
            ;;
        *)
            echo "error: invalid <vmid> argument [${1}]"
            exit 1
            ;;
    esac
fi

# ----------------------------------------------------------------------------
# parse the <keep> positional argument
# ----------------------------------------------------------------------------

if [ "${#}" -gt '0' ] && [ "${1:-not-set}" != 'not-set' ]
then
    case "${1}" in
        --help)
            arg_usage='yes'
            shift
            ;;
        [0-9]*)
            arg_keep="${1}"
            shift
            ;;
        *)
            echo "error: invalid <keep> argument [${1}]"
            exit 1
            ;;
    esac
fi

# ----------------------------------------------------------------------------
# parse the remaining options
# ----------------------------------------------------------------------------

while [ "${#}" -gt '0' ]
do
    case "${1}" in
        *=*)
            arg_value="$(expr "${1}" : '[^=]*=\(.*\)')"
            ;;
        *)
            arg_value=''
            ;;
    esac
    case "${1}" in
        --minvmid=*)
            echo "--minvmid is deprecated, use --lower-id instead"
            arg_lower_id="${arg_value}"
            ;;
        --maxvmid=*)
            echo "--maxvmid is deprecated, use --upper-id instead"
            arg_upper_id="${arg_value}"
            ;;
        --lower-id=*)
            arg_lower_id="${arg_value}"
            ;;
        --upper-id=*)
            arg_upper_id="${arg_value}"
            ;;
        --exclude=*)
            arg_exclude="$(echo "${arg_value}" | tr ',' ' ')"
            ;;
        --include=*)
            arg_include="$(echo "${arg_value}" | tr ',' ' ')"
            ;;
        --tag=*)
            arg_tag="$(echo "${arg_value}" | tr '[[:blank:]]' '_')"
            ;;
        --help)
            arg_usage='yes'
            ;;
        --debug)
            arg_debug='yes'
            ;;
        --debug=*)
            arg_debug="${arg_value}"
            ;;
        *)
            echo "error: unsupported option [${1}]"
            exit 1
            ;;
    esac
    shift
done

# ----------------------------------------------------------------------------
# display help if needed
# ----------------------------------------------------------------------------

if [ "${arg_vmid}" = 'help' ] || [ "${arg_usage}" = 'yes' ] || [ "${arg_error}" = 'yes' ]
then
    cat << ____EOF
Usage: ${arg_basename} [ help | <vmid> [ <keep> [OPTIONS] ] ]

Arguments:

    help                        display this help and exit
    vmid                        specifies the virtual machine id, can be 'all' or 'none'
    keep                        specifies the maximum number of snapshot to keep (default is 1)

Options:

    --lower-id={vmid}           specifies the lower vmid (default is 100)
    --upper-id={vmid}           specifies the upper vmid (default is 1000000)
    --exclude={vmid,vmid,...}   specifies the list of vmid to exclude
    --include={vmid,vmid,...}   specifies the list of vmid to include
    --tag={tag}                 specifies an optional snapshot tag (snapshots will be named "AUTOSNAP_{tag}_YYYYMMDD_HHMMSS")

Special options:

    --help                      display this help and exit
    --debug[={yes|no}]          enable/disable the debug mode

Environment variables:

    PVE_CT_MANAGER              ct manager (defaults to pct)
    PVE_VM_MANAGER              vm manager (defaults to qm)

____EOF
    if [ "${arg_error}" = 'yes' ]
    then
        exit 1
    fi
    exit 0
fi

# ----------------------------------------------------------------------------
# enable the debug mode if requested
# ----------------------------------------------------------------------------

if [ "${arg_debug}" = 'yes' ]
then
    set -x
fi

# ----------------------------------------------------------------------------
# verify the <keep> argument
# ----------------------------------------------------------------------------

if [ "${arg_keep}" -ge '0' ]
then
    : # no-op
else
    echo "the <keep> argument must be greater than or equal to 0"
    exit 1
fi

# ----------------------------------------------------------------------------
# verify the '--lower-id={vmid}' option
# ----------------------------------------------------------------------------

if [ "${arg_lower_id}" -ge "${pve_lower_id}" ] \
&& [ "${arg_lower_id}" -le "${pve_upper_id}" ]
then
    : # no-op
else
    echo "the lower-id is not in the range [${pve_lower_id},${pve_upper_id}]"
    exit 1
fi

# ----------------------------------------------------------------------------
# verify the '--upper-id={vmid}' option
# ----------------------------------------------------------------------------

if [ "${arg_upper_id}" -ge "${pve_lower_id}" ] \
&& [ "${arg_upper_id}" -le "${pve_upper_id}" ]
then
    : # no-op
else
    echo "the upper-id is not in the range [${pve_lower_id},${pve_upper_id}]"
    exit 1
fi

# ----------------------------------------------------------------------------
# verify the '--exclude={vmid,vmid,...}' option
# ----------------------------------------------------------------------------

if [ "${arg_exclude:-not-set}" != 'not-set' ]
then
    for excluded_vm in ${arg_exclude}
    do
        if [ "${excluded_vm}" -ge "${arg_lower_id}" ] \
        && [ "${excluded_vm}" -le "${arg_upper_id}" ]
        then
            : # no-op
        else
            echo "error: the excluded vmid <${excluded_vm}> is not in the range [${arg_lower_id},${arg_upper_id}]"
            exit 1
        fi
    done
fi

# ----------------------------------------------------------------------------
# verify the '--include={vmid,vmid,...}' option
# ----------------------------------------------------------------------------

if [ "${arg_include:-not-set}" != 'not-set' ]
then
    for included_vm in ${arg_include}
    do
        if [ "${included_vm}" -ge "${arg_lower_id}" ] \
        && [ "${included_vm}" -le "${arg_upper_id}" ]
        then
            : # no-op
        else
            echo "error: the included vmid <${included_vm}> is not in the range [${arg_lower_id},${arg_upper_id}]"
            exit 1
        fi
    done
fi

# ----------------------------------------------------------------------------
# if the given <vmid> is 'all', process vmids with the exclude list then exit
# ----------------------------------------------------------------------------

if [ "${arg_vmid}" = 'all' ]
then
    pve_ct_list="$(${pve_ct_manager} "${cmd_list_vm}" | grep -v VMID | awk '{ print $1 }')"
    pve_vm_list="$(${pve_vm_manager} "${cmd_list_vm}" | grep -v VMID | awk '{ print $1 }')"
    for vmid in ${pve_ct_list} ${pve_vm_list}
    do
        is_excluded='no'
        for excluded_vm in ${arg_exclude}
        do
            if [ "${vmid}" -eq "${excluded_vm}" ]
            then
                is_excluded='yes'
                break
            fi
        done
        if [ "${is_excluded}" = 'no' ] \
        && [ "${vmid}" -ge "${arg_lower_id}" ] \
        && [ "${vmid}" -le "${arg_upper_id}" ]
        then
            ${arg_program} "${vmid}" "${arg_keep}" --tag="${arg_tag}"
        fi
    done
    exit 0
fi

# ----------------------------------------------------------------------------
# if the given <vmid> is 'none', process vmids with the include list then exit
# ----------------------------------------------------------------------------

if [ "${arg_vmid}" = 'none' ]
then
    pve_ct_list="$(${pve_ct_manager} "${cmd_list_vm}" | grep -v VMID | awk '{ print $1 }')"
    pve_vm_list="$(${pve_vm_manager} "${cmd_list_vm}" | grep -v VMID | awk '{ print $1 }')"
    for vmid in ${pve_ct_list} ${pve_vm_list}
    do
        is_included='no'
        for included_vm in ${arg_include}
        do
            if [ "${vmid}" -eq "${included_vm}" ]
            then
                is_included='yes'
                break
            fi
        done
        if [ "${is_included}" = 'yes' ] \
        && [ "${vmid}" -ge "${arg_lower_id}" ] \
        && [ "${vmid}" -le "${arg_upper_id}" ]
        then
            ${arg_program} "${vmid}" "${arg_keep}" --tag="${arg_tag}"
        fi
    done
    exit 0
fi

# ----------------------------------------------------------------------------
# check if the given <vmid> is in the range {lower_id,upper_id}
# ----------------------------------------------------------------------------

if [ "${arg_vmid}" -ge "${arg_lower_id}" ] \
&& [ "${arg_vmid}" -le "${arg_upper_id}" ]
then
    : # no-op
else
    echo "error: the given vmid <${arg_vmid}> is not in the range [${arg_lower_id},${arg_upper_id}]"
    exit 1
fi

# ----------------------------------------------------------------------------
# process the given <vmid>
# ----------------------------------------------------------------------------

echo "=== ${arg_program} ${arg_vmid} ${arg_keep} ==="

pve_manager=''
pve_status=''

# ----------------------------------------------------------------------------
# check if this is a valid lxc vmid
# ----------------------------------------------------------------------------

if [ "${pve_manager:-not-set}" = 'not-set' ]
then
    pve_status="$(${pve_ct_manager} "${cmd_status}" "${arg_vmid}" 2>/dev/null)"
    if [ "${pve_status:-not-set}" != 'not-set' ]
    then
        pve_manager="${pve_ct_manager}"
    fi
fi

# ----------------------------------------------------------------------------
# check if this is a valid kvm vmid
# ----------------------------------------------------------------------------

if [ "${pve_manager:-not-set}" = 'not-set' ]
then
    pve_status="$(${pve_vm_manager} "${cmd_status}" "${arg_vmid}" 2>/dev/null)"
    if [ "${pve_status:-not-set}" != 'not-set' ]
    then
        pve_manager="${pve_vm_manager}"
    fi
fi

# ----------------------------------------------------------------------------
# check if this is a valid vmid
# ----------------------------------------------------------------------------

if [ "${pve_manager:-not-set}" = 'not-set' ]
then
    echo "error: <vmid> does not look like a valid VM ID"
    exit 1
fi

# ----------------------------------------------------------------------------
# create new snapshot for this vmid
# ----------------------------------------------------------------------------

if [ "${arg_tag:-not-set}" != 'not-set' ]
then
    autosnap_prefix="${arg_prefix}_${arg_tag}"
else
    autosnap_prefix="${arg_prefix}"
fi

autosnap_name="${autosnap_prefix}_$(date '+%Y%m%d_%H%M%S')"
autosnap_desc="automatic snapshot"

if [ "${arg_keep}" -gt '0' ]
then
    ${pve_manager} "${cmd_create_snapshot}" "${arg_vmid}" "${autosnap_name}" -description "${autosnap_desc}"
fi

# ----------------------------------------------------------------------------
# delete old snapshots for this vmid
# ----------------------------------------------------------------------------

autosnap_list="$(${pve_manager} "${cmd_list_snapshot}" "${arg_vmid}" | sed -e 's/^.*`-> //' | grep -i "^${autosnap_prefix}_[0-9]\{8\}_[0-9]\{6\} .*$" | awk '{ print $1 }' | sort)"
autosnap_left="$(echo "${autosnap_list}" | wc -w)"

for autosnap_item in ${autosnap_list}
do
    if [ "${autosnap_left}" -gt "${arg_keep}" ]
    then
        ${pve_manager} "${cmd_delete_snapshot}" "${arg_vmid}" "${autosnap_item}"
    fi
    autosnap_left=$((autosnap_left - 1))
done

# ----------------------------------------------------------------------------
# End-Of-File
# ----------------------------------------------------------------------------
