#!/bin/sh
#
# pve-autosnap - Copyright (c) 2018-2024 - Olivier Poncet
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>
#

# ----------------------------------------------------------------------------
# pve definitions
# ----------------------------------------------------------------------------

pve_kvm_manager='/usr/sbin/qm'
pve_lxc_manager='/usr/sbin/pct'
pve_minvmid='100'
pve_maxvmid='1000000'

# ----------------------------------------------------------------------------
# kvm/lxc manager definitions
# ----------------------------------------------------------------------------

kvm_manager="${pve_kvm_manager}"
lxc_manager="${pve_lxc_manager}"
cmd_status='status'
cmd_list_vm='list'
cmd_list_snapshot='listsnapshot'
cmd_create_snapshot='snapshot'
cmd_delete_snapshot='delsnapshot'

# ----------------------------------------------------------------------------
# program options
# ----------------------------------------------------------------------------

opt_vmid='help'
opt_keep='1'
opt_minvmid="${pve_minvmid}"
opt_maxvmid="${pve_maxvmid}"
opt_exclude=''
opt_include=''
opt_prefix='AUTOSNAP'
opt_tag='not-set'
opt_help='no'
opt_debug='no'

# ----------------------------------------------------------------------------
# get the program name
# ----------------------------------------------------------------------------

if [ "no${0}ne" != 'none' ]
then
    pve_autosnap="${0}"
else
    pve_autosnap="pve-autosnap"
fi

# ----------------------------------------------------------------------------
# parse the <vmid> positional parameter
# ----------------------------------------------------------------------------

if [ "${#}" -gt '0' ] && [ "no${1}ne" != 'none' ]
then
    case "${1}" in
        --help)
            opt_help='yes'
            shift
            ;;
        [0-9]* | all | none | help)
            opt_vmid="${1}"
            shift
            ;;
        *)
            echo "error: invalid <vmid> argument [${1}]"
            exit 1
            ;;
    esac
fi

# ----------------------------------------------------------------------------
# parse the <keep> positional parameter
# ----------------------------------------------------------------------------

if [ "${#}" -gt '0' ] && [ "no${1}ne" != 'none' ]
then
    case "${1}" in
        --help)
            opt_help='yes'
            shift
            ;;
        [0-9]*)
            opt_keep="${1}"
            shift
            ;;
        *)
            echo "error: invalid <keep> argument [${1}]"
            exit 1
            ;;
    esac
fi

# ----------------------------------------------------------------------------
# parse the command-line options
# ----------------------------------------------------------------------------

while [ "${#}" -gt '0' ]
do
    case "${1}" in
        *=*)
            arg_value="$(expr "${1}" : '[^=]*=\(.*\)')"
            ;;
        *)
            arg_value=''
            ;;
    esac
    case "${1}" in
        --minvmid=*)
            opt_minvmid="${arg_value}"
            ;;
        --maxvmid=*)
            opt_maxvmid="${arg_value}"
            ;;
        --exclude=*)
            opt_exclude="$(echo "${arg_value}" | tr ',' ' ')"
            ;;
        --include=*)
            opt_include="$(echo "${arg_value}" | tr ',' ' ')"
            ;;
        --tag=*)
            opt_tag="$(echo "${arg_value}" | tr '[[:blank:]]' '_')"
            ;;
        --kvm-manager=*)
            kvm_manager="${arg_value}"
            ;;
        --lxc-manager=*)
            lxc_manager="${arg_value}"
            ;;
        --help)
            opt_help='yes'
            ;;
        --debug)
            opt_debug='yes'
            ;;
        --debug=*)
            opt_debug="${arg_value}"
            ;;
        *)
            echo "error: unsupported option [${1}]"
            exit 1
            ;;
    esac
    shift
done

# ----------------------------------------------------------------------------
# display help if requested
# ----------------------------------------------------------------------------

if [ "${opt_help}" = 'yes' ] || [ "${opt_vmid}" = 'help' ]
then
    cat << ____EOF
Usage: $(basename ${pve_autosnap}) [ help | <vmid> [ <keep> [OPTIONS] ] ]

Arguments:

    help   display this help and exit
    vmid   specifies the virtual machine id, can be 'all' or 'none'
    keep   specifies the maximum number of snapshot to keep (default is 1)

Options:

    --minvmid={vmid}            specifies the first vmid (default is 100)
    --maxvmid={vmid}            specifies the last vmid (default is 9999)
    --exclude={vmid,vmid,...}   specifies the list of vmid to exclude
    --include={vmid,vmid,...}   specifies the list of vmid to include
    --tag={tag}                 specifies an optional snapshot tag (snapshots will be named "AUTOSNAP_{tag}_YYYYMMDD_HHMMSS")

PVE options:

    --kvm-manager={path}        specifies the KVM manager ('${pve_kvm_manager}')
    --lxc-manager={path}        specifies the LXC manager ('${pve_lxc_manager}')

Special options:

    --help                      display this help and exit
    --debug[={yes|no}]          enable/disable the debug mode

____EOF
    exit 0
fi

# ----------------------------------------------------------------------------
# enable the debug mode if requested
# ----------------------------------------------------------------------------

if [ "${opt_debug}" = 'yes' ]
then
    set -x
fi

# ----------------------------------------------------------------------------
# verify the <keep> argument
# ----------------------------------------------------------------------------

if [ "${opt_keep}" -ge '0' ]
then
    : # no-op
else
    echo "the <keep> argument must be greater than or equal to 0"
    exit 1
fi

# ----------------------------------------------------------------------------
# verify the '--minvmid={vmid}' option
# ----------------------------------------------------------------------------

if [ "${opt_minvmid}" -ge "${pve_minvmid}" ] \
&& [ "${opt_minvmid}" -le "${pve_maxvmid}" ]
then
    : # no-op
else
    echo "the minimum vmid is not in the range [${pve_minvmid},${pve_maxvmid}]"
    exit 1
fi

# ----------------------------------------------------------------------------
# verify the '--maxvmid={vmid}' option
# ----------------------------------------------------------------------------

if [ "${opt_maxvmid}" -ge "${pve_minvmid}" ] \
&& [ "${opt_maxvmid}" -le "${pve_maxvmid}" ]
then
    : # no-op
else
    echo "the maximum vmid is not in the range [${pve_minvmid},${pve_maxvmid}]"
    exit 1
fi

# ----------------------------------------------------------------------------
# verify the '--exclude={vmid,vmid,...}' option
# ----------------------------------------------------------------------------

if [ "${opt_exclude:-not-set}" != 'not-set' ]
then
    for excluded_vm in ${opt_exclude}
    do
        if [ "${excluded_vm}" -ge "${opt_minvmid}" ] \
        && [ "${excluded_vm}" -le "${opt_maxvmid}" ]
        then
            : # no-op
        else
            echo "error: the excluded vmid <${excluded_vm}> is not in the range [${opt_minvmid},${opt_maxvmid}]"
            exit 1
        fi
    done
fi

# ----------------------------------------------------------------------------
# verify the '--include={vmid,vmid,...}' option
# ----------------------------------------------------------------------------

if [ "${opt_include:-not-set}" != 'not-set' ]
then
    for included_vm in ${opt_include}
    do
        if [ "${included_vm}" -ge "${opt_minvmid}" ] \
        && [ "${included_vm}" -le "${opt_maxvmid}" ]
        then
            : # no-op
        else
            echo "error: the included vmid <${included_vm}> is not in the range [${opt_minvmid},${opt_maxvmid}]"
            exit 1
        fi
    done
fi

# ----------------------------------------------------------------------------
# verify the '--kvm-manager={path}' option
# ----------------------------------------------------------------------------

if [ "${kvm_manager:-not-set}" != 'not-set' ] && [ -x "${kvm_manager}" ]
then
    : # no-op
else
    echo "error: the kvm manager <${kvm_manager}> is not a valid program"
    exit 1
fi

# ----------------------------------------------------------------------------
# verify the '--lxc-manager={path}' option
# ----------------------------------------------------------------------------

if [ "${lxc_manager:-not-set}" != 'not-set' ] && [ -x "${lxc_manager}" ]
then
    : # no-op
else
    echo "error: the lxc manager <${lxc_manager}> is not a valid program"
    exit 1
fi

# ----------------------------------------------------------------------------
# if the given <vmid> is 'all', process vmids with the exclude list then exit
# ----------------------------------------------------------------------------

if [ "${opt_vmid}" = 'all' ]
then
    kvm_list="$(${kvm_manager} "${cmd_list_vm}" | grep -v VMID | awk '{ print $1 }')"
    lxc_list="$(${lxc_manager} "${cmd_list_vm}" | grep -v VMID | awk '{ print $1 }')"
    vmid_list="${kvm_list} ${lxc_list}"
    for vmid in ${vmid_list}
    do
        is_excluded='no'
        for excluded_vm in ${opt_exclude}
        do
            if [ "${vmid}" -eq "${excluded_vm}" ]
            then
                is_excluded='yes'
                break
            fi
        done
        if [ "${is_excluded}" = 'no' ] \
        && [ "${vmid}" -ge "${opt_minvmid}" ] \
        && [ "${vmid}" -le "${opt_maxvmid}" ]
        then
            ${pve_autosnap} "${vmid}" "${opt_keep}" --tag="${opt_tag}"
        fi
    done
    exit 0
fi

# ----------------------------------------------------------------------------
# if the given <vmid> is 'none', process vmids with the include list then exit
# ----------------------------------------------------------------------------

if [ "${opt_vmid}" = 'none' ]
then
    kvm_list="$(${kvm_manager} "${cmd_list_vm}" | grep -v VMID | awk '{ print $1 }')"
    lxc_list="$(${lxc_manager} "${cmd_list_vm}" | grep -v VMID | awk '{ print $1 }')"
    vmid_list="${kvm_list} ${lxc_list}"
    for vmid in ${vmid_list}
    do
        is_included='no'
        for included_vm in ${opt_include}
        do
            if [ "${vmid}" -eq "${included_vm}" ]
            then
                is_included='yes'
                break
            fi
        done
        if [ "${is_included}" = 'yes' ] \
        && [ "${vmid}" -ge "${opt_minvmid}" ] \
        && [ "${vmid}" -le "${opt_maxvmid}" ]
        then
            ${pve_autosnap} "${vmid}" "${opt_keep}" --tag="${opt_tag}"
        fi
    done
    exit 0
fi

# ----------------------------------------------------------------------------
# process the given <vmid>
# ----------------------------------------------------------------------------

echo "=== $(basename ${pve_autosnap}) ${opt_vmid} ${opt_keep} ==="

vm_status=''
vm_manager=''

# ----------------------------------------------------------------------------
# check if this is a valid kvm vmid
# ----------------------------------------------------------------------------

if [ "${vm_manager:-not-set}" = 'not-set' ]
then
    vm_status="$(${kvm_manager} "${cmd_status}" "${opt_vmid}" 2>/dev/null)"
    if [ "${vm_status:-not-set}" != 'not-set' ]
    then
        vm_manager="${kvm_manager}"
    fi
fi

# ----------------------------------------------------------------------------
# check if this is a valid lxc vmid
# ----------------------------------------------------------------------------

if [ "${vm_manager:-not-set}" = 'not-set' ]
then
    vm_status="$(${lxc_manager} "${cmd_status}" "${opt_vmid}" 2>/dev/null)"
    if [ "${vm_status:-not-set}" != 'not-set' ]
    then
        vm_manager="${lxc_manager}"
    fi
fi

# ----------------------------------------------------------------------------
# check if this is a valid vmid
# ----------------------------------------------------------------------------

if [ "${vm_manager:-not-set}" = 'not-set' ]
then
    echo "error: <vmid> does not look like a valid VM ID"
    exit 1
fi

# ----------------------------------------------------------------------------
# create new snapshot for this vmid
# ----------------------------------------------------------------------------

if [ "${opt_tag:-not-set}" != 'not-set' ]
then
    autosnap_prefix="${opt_prefix}_${opt_tag}"
else
    autosnap_prefix="${opt_prefix}"
fi

autosnap_name="${autosnap_prefix}_$(date '+%Y%m%d_%H%M%S')"
autosnap_desc="automatic snapshot"

if [ "${opt_keep}" -gt '0' ]
then
    ${vm_manager} "${cmd_create_snapshot}" "${opt_vmid}" "${autosnap_name}" -description "${autosnap_desc}"
fi

# ----------------------------------------------------------------------------
# delete old snapshots for this vmid
# ----------------------------------------------------------------------------

autosnap_list="$(${vm_manager} "${cmd_list_snapshot}" "${opt_vmid}" | sed -e 's/^.*`-> //' | grep -i "^${autosnap_prefix}_[0-9]\{8\}_[0-9]\{6\} .*$" | awk '{ print $1 }' | sort)"
autosnap_left="$(echo "${autosnap_list}" | wc -w)"

for autosnap_item in ${autosnap_list}
do
    if [ "${autosnap_left}" -gt "${opt_keep}" ]
    then
        ${vm_manager} "${cmd_delete_snapshot}" "${opt_vmid}" "${autosnap_item}"
    fi
    autosnap_left=$((autosnap_left - 1))
done

# ----------------------------------------------------------------------------
# End-Of-File
# ----------------------------------------------------------------------------
